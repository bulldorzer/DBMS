데이터는 사전 형식으로 저장됨
betreeindex(Beta_tree) - default인덱스(기본형)
PK(기본키)는 인덱스에 자동으로 생성 => 
기본키를 통해 데이터를 찾기 때문에 사전처럼 저장되어있는 
메모리에 해당 데이터를 찾을 때 필요함

fulltextindex - 정말 많은 텍스트를 포함한 데이터에서 
필요 정보를 찾을때 사용

기본 형식 
create index 별칭 on 테이블명(컬럼명1,컬럼명2,~);
별칭을 쓰는 이유 테이블당 하나의 컬럼만 지정하는것이 
아닌 여러 컬럼을 지정할수 있기 떄문임

보통 인덱스를 사용할땐 데이터가 많을떄 사용하는게 좋음
조회가 빠른이유는 
인덱스에 걸린 테이블 컬럼 위치를 정확하게 알고 있기 때문에
바로 조회 가능함

----------------<index>-----------
빠른 조회 빠른처리
쓰면 좋은 조건
	1. 많이 사용되는 컬럼, 키워드
	2. 수많은 데이터
	3. 수많은 테이블을 조인하거나 연결되어있는 테이블
쓰지말아야할 데이터 
	1. 분포도가 너무 좋은 DB테이블
	2. 너무 데이터양이 적은 경우 (데이터 10.000건이하)
	3. 컬럼이 너무 적은 테이블또는 select 결과값
	4. 단독테이블일때는 별로 필요없음


explain 명령어
 select문을 어떠한 방식으로 수행하여 데이터를 
 가져올 것인지에 대한 실행 계획을 출력하는 명령어입니다. 
 사용 방법은 질의하고자 하는 select 쿼리 앞에 
 explain 키워드를 붙여서 사용합니다. 
 실행 계획은 아래와 같은 형식으로 표현됩니다.

explain select * from table;

----------------<속도 확인법>-----------
MySQL Profiling
MySQL에서 실행한 쿼리들이 각 수행 시간이 얼마가 걸렸는지 확인할 수 있는 기능으로 쿼리 프로파일링(Query Profiling)을 제공합니다.

profiling 설정을 활성화하면 앞으로 실행되는 모든 쿼리문의 수행 시간을 기록합니다.

profiling 속성은 적지 않은 부하를 생성하기 때문에, 기본값으로는 OFF로 되어있습니다.

Profiling  옵션 확인
Profiling 옵션의 활성화 여부는 다음과 같이 확인합니다.

SELECT @@profiling;
결과 값이 1이면 ON, 0이면 OFF 입니다.

set profiling =1 
로 profiling 을 활성화함

그리고 show profiles 로 속도를 확인할수 있음

set profiling_history_size = 100;
profile 속도 결과를 100줄까지 볼수있음

show profile for query 16;
16번째 수행된 쿼리의 상세정보를 볼수있음
